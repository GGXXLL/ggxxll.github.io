<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ACID on Trock</title><link>https://ggxxll.github.io/tags/acid/</link><description>Recent content in ACID on Trock</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 23 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ggxxll.github.io/tags/acid/index.xml" rel="self" type="application/rss+xml"/><item><title>ACID</title><link>https://ggxxll.github.io/p/acid/</link><pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate><guid>https://ggxxll.github.io/p/acid/</guid><description>&lt;h3 id="概述">概述&lt;/h3>
&lt;p>ACID，是指数据库管理系统（DBMS）在写入或更新资料的过程中，为保证事务（transaction）是正确可靠的，所必须具备的四个特性：
原子性（atomicity[ˌætəˈmɪsəti]， 或称不可分割性）、一致性（consistency[kənˈsɪstənsi]）、
隔离性（isolation[ˌaɪsəˈleɪʃn]，又称独立性）、持久性（durability[ˌdjʊərəˈbɪlɪti]）。&lt;/p>
&lt;p>在数据库系统中，一个事务是指：由一系列数据库操作组成的一个完整的逻辑过程。例如银行转帐，从原账户扣除金额，以及向目标账户添加金额，这两个数据库操作的总和，构成一个完整的逻辑过程，不可拆分。这个过程被称为一个事务，具有ACID特性。&lt;/p>
&lt;h3 id="特性">特性&lt;/h3>
&lt;p>Atomicity（原子性）：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。&lt;/p>
&lt;ul>
&lt;li>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。&lt;/li>
&lt;li>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read
uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。&lt;/li>
&lt;li>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。&lt;/li>
&lt;/ul>
&lt;h3 id="事务并发时可能出现的问题">事务并发时可能出现的问题&lt;/h3>
&lt;h4 id="脏读dirty-read">脏读（Dirty Read）&lt;/h4>
&lt;p>一个事务读到了另一个未提交事务修改过的数据&lt;/p>
&lt;h4 id="不可重复读non-repeatable-read">不可重复读（Non-Repeatable Read）&lt;/h4>
&lt;p>一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提交和读已提交隔离级别都可能会出现）&lt;/p>
&lt;h4 id="幻读phantom">幻读（Phantom）&lt;/h4>
&lt;p>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）&lt;/p>
&lt;h3 id="mysql事务的隔离级别">Mysql事务的隔离级别&lt;/h3>
&lt;p>MySQL的事务隔离级别一共有四个，分别是读未提交、读已提交、可重复读以及可串行化。&lt;/p>
&lt;p>MySQL的隔离级别的作用就是让事务之间互相隔离，互不影响，这样可以保证事务的一致性。&lt;/p>
&lt;p>隔离级别比较：可串行化&amp;gt;可重复读&amp;gt;读已提交&amp;gt;读未提交&lt;/p>
&lt;p>隔离级别对性能的影响比较：可串行化&amp;gt;可重复读&amp;gt;读已提交&amp;gt;读未提交&lt;/p>
&lt;p>由此看出，隔离级别越高，所需要消耗的MySQL性能越大（如事务并发严重性），为了平衡二者，一般建议设置的隔离级别为可重复读，MySQL默认的隔离级别也是可重复读。&lt;/p>
&lt;h4 id="读未提交read-uncommitted">读未提交（READ UNCOMMITTED）&lt;/h4>
&lt;p>在读未提交隔离级别下，事务A可以读取到事务B修改过但未提交的数据。&lt;/p>
&lt;p>可能发生脏读、不可重复读和幻读问题，一般很少使用此隔离级别。&lt;/p>
&lt;h4 id="读已提交read-committed">读已提交（READ COMMITTED）&lt;/h4>
&lt;p>在读已提交隔离级别下，事务B只能在事务A修改过并且已提交后才能读取到事务B修改的数据。&lt;/p>
&lt;p>读已提交隔离级别解决了脏读的问题，但可能发生不可重复读和幻读问题，一般很少使用此隔离级别。&lt;/p>
&lt;h4 id="可重复读repeatable-read">可重复读（REPEATABLE READ）&lt;/h4>
&lt;p>在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据。&lt;/p>
&lt;p>可重复读隔离级别解决了脏读和不可重复读的问题，但可能发生幻读问题。&lt;/p>
&lt;p>提问：为什么上了写锁（写操作），别的事务还可以读操作？&lt;/p>
&lt;p>因为InnoDB有MVCC机制（多版本并发控制），可以使用快照读，而不会被阻塞。&lt;/p>
&lt;h4 id="串行化serializable">串行化（SERIALIZABLE）&lt;/h4>
&lt;p>各种问题（脏读、不可重复读、幻读）都不会发生，通过加锁实现（读锁和写锁）。
事务并发执行时，阻塞情况与读写锁相同，可同时读，不可以读写交叉。&lt;/p>
&lt;h3 id="隔离级别比较">隔离级别比较&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>级别&lt;/th>
&lt;th>脏读&lt;/th>
&lt;th>不可重复读&lt;/th>
&lt;th>幻读&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>读未提交&lt;/td>
&lt;td>可能&lt;/td>
&lt;td>可能&lt;/td>
&lt;td>可能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>读已提交&lt;/td>
&lt;td>不会&lt;/td>
&lt;td>可能&lt;/td>
&lt;td>可能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>可重复读&lt;/td>
&lt;td>不会&lt;/td>
&lt;td>不会&lt;/td>
&lt;td>可能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>串行读&lt;/td>
&lt;td>不会&lt;/td>
&lt;td>不会&lt;/td>
&lt;td>不会&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="隔离级别的实现原理">隔离级别的实现原理&lt;/h3>
&lt;p>使用MySQL的默认隔离级别（可重复读）来进行说明。&lt;/p>
&lt;p>每条记录在更新的时候都会同时记录一条回滚操作（回滚操作日志undo log）。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。
即通过回滚（rollback操作），可以回到前一个状态的值。&lt;/p>
&lt;p>提问：回滚操作日志（undo log）什么时候删除？&lt;/p>
&lt;p>MySQL会判断当没有事务需要用到这些回滚日志的时候，回滚日志会被删除。&lt;/p>
&lt;p>提问：什么时候不需要了？&lt;/p>
&lt;p>当系统里么有比这个回滚日志更早的read-view的时候。&lt;/p>
&lt;h3 id="相关操作">相关操作&lt;/h3>
&lt;h4 id="查看隔离级别">查看隔离级别&lt;/h4>
&lt;ol>
&lt;li>&lt;code>SHOW VARIABLES LIKE 'transaction_isolation';&lt;/code>&lt;/li>
&lt;li>&lt;code>SELECT @@transaction_isolation;&lt;/code>&lt;/li>
&lt;/ol>
&lt;h4 id="设置隔离级别">设置隔离级别&lt;/h4>
&lt;h5 id="set-命令">SET 命令&lt;/h5>
&lt;p>&lt;code>SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">其中level有4种值：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">level: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REPEATABLE READ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | READ COMMITTED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | READ UNCOMMITTED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | SERIALIZABLE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>1.　GLOBAL&lt;/p>
&lt;ul>
&lt;li>只对执行完该语句之后产生的会话起作用&lt;/li>
&lt;li>当前已经存在的会话无效&lt;/li>
&lt;/ul>
&lt;p>2.　SESSION&lt;/p>
&lt;ul>
&lt;li>只对当前会话中下一个即将开启的事务有效&lt;/li>
&lt;li>下一个事务执行完后，后续事务将恢复到之前的隔离级别&lt;/li>
&lt;li>该语句不能在已经开启的事务中间执行，会报错的&lt;/li>
&lt;/ul>
&lt;h5 id="服务启动项命令">服务启动项命令&lt;/h5>
&lt;p>可以修改启动参数transaction-isolation的值&lt;/p>
&lt;p>比方说我们在启动服务器时指定了&amp;ndash;transaction-isolation=READ UNCOMMITTED，那么事务的默认隔离级别就从原来的REPEATABLE READ变成了READ UNCOMMITTED。&lt;/p></description></item></channel></rss>